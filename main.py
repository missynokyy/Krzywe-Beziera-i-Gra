import pygame
import numpy as np
import matplotlib.pyplot as plt

# Funkcja obliczająca silnię liczby n
def silnia(n):
    if n == 0:
        return 1
    else:
        return n * silnia(n-1)

# Funkcja obliczająca współczynnik dwumianowy "n po i"
def dwumian(n, i):
    return silnia(n) / (silnia(i) * silnia(n - i))

# Funkcja rysująca krzywą Béziera na podstawie punktów kontrolnych
def plot_bezier_curve(points):
    t = np.linspace(0, 1, 100)  # Generowanie 100 równomiernie rozmieszczonych wartości parametru t (od 0 do 1)
    n = len(points)  # Liczba punktów kontrolnych krzywej Béziera
    x = 0  # Zmienna przechowująca wartość współrzędnej x na krzywej Béziera
    y = 0  # Zmienna przechowująca wartość współrzędnej y na krzywej Béziera

    # Iteracja przez punkty kontrolne i obliczanie wartości współrzędnych x i y na krzywej Béziera
    for i in range(n):
        # Obliczanie wartości współrzędnych x i y na krzywej Béziera na podstawie wzoru
        x += points[i][0] * dwumian(n-1,i) * pow((1-t),(n-1-i)) * pow(t,i)
        y += points[i][1] * dwumian(n-1,i) * pow((1-t),(n-1-i)) * pow(t,i)

    plt.plot(x, y)  # Rysowanie krzywej Béziera na wykresie


# Współrzędne punktów kontrolnych krzywych dla M
M1_points = np.array([[0, 0], [0, 2], [0.5, 0.5]])
M2_points = np.array([[0.5, 0.5], [1,2], [1,0]])
m1_points = np.array([[0.05, 0], [0, 1.5], [0.5, 0.4]])
m2_points = np.array([[0.5, 0.4], [1,1.5], [0.95,0]])

# Współrzędne punktów kontrolnych krzywych dla S
S1_points = np.array([[1.25, 0], [2, 0.25], [1.5, 0.5]])
S2_points = np.array([[1.5, 0.5], [1,0.75], [2, 1]])
s1_points = np.array([[1.25,0], [2.5,0.25],[1.75, 0.5]])
s2_points = np.array([[1.75, 0.5], [1.25, 0.75], [2, 1]])

# Rysowanie inicjalow
fig, ax = plt.subplots()
plot_bezier_curve(M1_points)
plot_bezier_curve(M2_points)
plot_bezier_curve(m1_points)
plot_bezier_curve(m2_points)

plot_bezier_curve(S1_points)
plot_bezier_curve(S2_points)
plot_bezier_curve(s1_points)
plot_bezier_curve(s2_points)
ax.set_aspect('equal')
plt.show()

# Rysowanie powierzchni Béziera
def plot_bezier_surface(points):
    n = len(points)  # Liczba punktów kontrolnych wzdłuż osi u
    m = len(points[0])  # Liczba punktów kontrolnych wzdłuż osi v

    # Tworzenie macierzy dla współrzędnych X, Y, Z
    X = np.zeros((n, m))
    Y = np.zeros((n, m))
    Z = np.zeros((n, m))

    # Przypisanie wartości współrzędnych X, Y, Z na podstawie podanych punktów kontrolnych
    for i in range(n):
        for j in range(m):
            X[i][j] = points[i][j][0]
            Y[i][j] = points[i][j][1]
            Z[i][j] = points[i][j][2]

    # Generowanie 100 równomiernie rozmieszczonych wartości parametru u i v (od 0 do 1)
    u = np.linspace(0, 1, 100)
    v = np.linspace(0, 1, 100)

    # Inicjalizacja macierzy dla współrzędnych x, y, z
    x = np.zeros((100, 100))
    y = np.zeros((100, 100))
    z = np.zeros((100, 100))

    # Obliczenie współrzędnych x, y, z na powierzchni Beziera dla danego parametru u i v
    for i in range(100):
        for j in range(100):
            for k in range(n):
                for l in range(m):
                    # Obliczanie wartości x, y, z na podstawie wzoru na powierzchnię Bezier'a
                    x[i][j] += X[k][l] * dwumian(n-1, k) * pow((1-u[i]), (n-1-k)) * pow(u[i], k) * \
                               dwumian(m-1, l) * pow((1-v[j]), (m-1-l)) * pow(v[j], l)
                    y[i][j] += Y[k][l] * dwumian(n-1, k) * pow((1-u[i]), (n-1-k)) * pow(u[i], k) * \
                               dwumian(m-1, l) * pow((1-v[j]), (m-1-l)) * pow(v[j], l)
                    z[i][j] += Z[k][l] * dwumian(n-1, k) * pow((1-u[i]), (n-1-k)) * pow(u[i], k) * \
                               dwumian(m-1, l) * pow((1-v[j]), (m-1-l)) * pow(v[j], l)
    # Rysowanie powierzchni Bezier'a na wcześniej zdefiniowanym wykresie 3D
    ax.plot_surface(x, y, z)

# Współrzędne punktów kontrolnych filizanki
kubek1 = [
[(0.409091, 0.772727, 0.0), (0.409091, 0.772727, -0.229091), (0.229091, 0.772727, -0.409091), (0.0, 0.772727, -0.409091)],
[(0.409091, 0.886364, 0.0), (0.409091, 0.886364, -0.229091), (0.229091, 0.886364, -0.409091), (0.0, 0.886364, -0.409091)],
[(0.454545, 0.886364, 0.0), (0.454545, 0.886364, -0.254545), (0.254545, 0.886364, -0.454545), (0.0, 0.886364, -0.454545)],
[(0.454545, 0.772727, 0.0), (0.454545, 0.772727, -0.254545), (0.254545, 0.772727, -0.454545), (0.0, 0.772727, -0.454545)]
]

kubek2 =  [
[(0.0, 0.772727, -0.409091), (-0.229091, 0.772727, -0.409091), (-0.409091, 0.772727, -0.229091), (-0.409091, 0.772727, 0.0)],
[(0.0, 0.886364, -0.409091), (-0.229091, 0.886364, -0.409091), (-0.409091, 0.886364, -0.229091), (-0.409091, 0.886364, 0.0)],
[(0.0, 0.886364, -0.454545), (-0.254545, 0.886364, -0.454545), (-0.454545, 0.886364, -0.254545), (-0.454545, 0.886364, 0.0)],
[(0.0, 0.772727, -0.454545), (-0.254545, 0.772727, -0.454545), (-0.454545, 0.772727, -0.254545), (-0.454545, 0.772727, 0.0)]
]

kubek3 = [
[(-0.409091, 0.772727, 0.0), (-0.409091, 0.772727, 0.229091), (-0.229091, 0.772727, 0.409091), (0.0, 0.772727, 0.409091)],
[(-0.409091, 0.886364, 0.0), (-0.409091, 0.886364, 0.229091), (-0.229091, 0.886364, 0.409091), (0.0, 0.886364, 0.409091)],
[(-0.454545, 0.886364, 0.0), (-0.454545, 0.886364, 0.254545), (-0.254545, 0.886364, 0.454545), (0.0, 0.886364, 0.454545)],
[(-0.454545, 0.772727, 0.0), (-0.454545, 0.772727, 0.254545), (-0.254545, 0.772727, 0.454545), (0.0, 0.772727, 0.454545)]
]

kubek4 = [
[(0.0, 0.772727, 0.409091), (0.229091, 0.772727, 0.409091), (0.409091, 0.772727, 0.229091), (0.0, 0.772727, 0.0)],
[(0.0, 0.886364, 0.409091), (0.229091, 0.886364, 0.409091), (0.409091, 0.886364, 0.229091), (0.0, 0.886364, 0.0)],
[(0.0, 0.886364, 0.454545), (0.254545, 0.886364, 0.454545), (0.454545, 0.886364, 0.254545), (0.0, 0.886364, 0.0)],
[(0.0, 0.772727, 0.454545), (0.254545, 0.772727, 0.454545), (0.454545, 0.772727, 0.254545), (0.0, 0.772727, 0.0)]
]

kubek5 = [
[(0.454545, 0.772727, 0.0), (0.454545, 0.772727, -0.254545), (0.254545, 0.772727, -0.454545), (0.0, 0.772727, -0.454545)],
[(0.454545, 0.545455, 0.0), (0.454545, 0.545455, -0.254545), (0.254545, 0.545455, -0.454545), (0.0, 0.545455, -0.454545)],
[(0.454545, 0.272727, 0.0), (0.454545, 0.272727, -0.254545), (0.254545, 0.272727, -0.454545), (0.0, 0.272727, -0.454545)],
[(0.318182, 0.0454545, 0.0), (0.318182, 0.0454545, -0.178182), (0.178182, 0.0454545, -0.318182), (0.0, 0.0454545, -0.318182)]
]

kubek6 = [    [(0.0, 0.772727, -0.454545), (-0.254545, 0.772727, -0.454545), (-0.454545, 0.772727, -0.254545), (-0.454545, 0.772727, 0.0)],
    [(0.0, 0.545455, -0.454545), (-0.254545, 0.545455, -0.454545), (-0.454545, 0.545455, -0.254545), (-0.454545, 0.545455, 0.0)],
    [(0.0, 0.272727, -0.454545), (-0.254545, 0.272727, -0.454545), (-0.454545, 0.272727, -0.254545), (-0.454545, 0.272727, 0.0)],
    [(0.0, 0.0454545, -0.318182), (-0.178182, 0.0454545, -0.318182), (-0.318182, 0.0454545, -0.178182), (-0.318182, 0.0454545, 0.0)]
]

kubek7 = [
[(-0.454545, 0.772727, 0.0), (-0.454545, 0.772727, 0.254545), (-0.254545, 0.772727, 0.454545), (0.0, 0.772727, 0.454545)],
[(-0.454545, 0.545455, 0.0), (-0.454545, 0.545455, 0.254545), (-0.254545, 0.545455, 0.454545), (0.0, 0.545455, 0.454545)],
[(-0.454545, 0.272727, 0.0), (-0.454545, 0.272727, 0.254545), (-0.254545, 0.272727, 0.454545), (0.0, 0.272727, 0.454545)],
[(-0.318182, 0.0454545, 0.0), (-0.318182, 0.0454545, 0.178182), (-0.178182, 0.0454545, 0.318182), (0.0, 0.0454545, 0.318182)]
]

kubek8 = [    [(0.0, 0.772727, 0.454545), (0.254545, 0.772727, 0.454545), (0.454545, 0.772727, 0.254545), (0.454545, 0.772727, 0.0)],
    [(0.0, 0.545455, 0.454545), (0.254545, 0.545455, 0.454545), (0.454545, 0.545455, 0.254545), (0.454545, 0.545455, 0.0)],
    [(0.0, 0.272727, 0.454545), (0.254545, 0.272727, 0.454545), (0.454545, 0.272727, 0.254545), (0.454545, 0.272727, 0.0)],
    [(0.0, 0.0454545, 0.318182), (0.178182, 0.0454545, 0.318182), (0.318182, 0.0454545, 0.178182), (0.318182, 0.0454545, 0.0)]
]

kubek9 = [
    [(0.272727, 0.0454545, 0.0), (0.272727, 0.0454545, -0.152727), (0.152727, 0.0454545, -0.272727), (0.0, 0.0454545, -0.272727)],
    [(0.409091, 0.272727, 0.0), (0.409091, 0.272727, -0.229091), (0.229091, 0.272727, -0.409091), (0.0, 0.272727, -0.409091)],
    [(0.409091, 0.545455, 0.0), (0.409091, 0.545455, -0.229091), (0.229091, 0.545455, -0.409091), (0.0, 0.545455, -0.409091)],
    [(0.409091, 0.772727, 0.0), (0.409091, 0.772727, -0.229091), (0.229091, 0.772727, -0.409091), (0.0, 0.772727, -0.409091)]
]

kubek10 = [    [(0.0, 0.0454545, -0.272727), (-0.152727, 0.0454545, -0.272727), (-0.272727, 0.0454545, -0.152727), (-0.272727, 0.0454545, 0.0)],
    [(0.0, 0.272727, -0.409091), (-0.229091, 0.272727, -0.409091), (-0.409091, 0.272727, -0.229091), (-0.409091, 0.272727, 0.0)],
    [(0.0, 0.545455, -0.409091), (-0.229091, 0.545455, -0.409091), (-0.409091, 0.545455, -0.229091), (-0.409091, 0.545455, 0.0)],
    [(0.0, 0.772727, -0.409091), (-0.229091, 0.772727, -0.409091), (-0.409091, 0.772727, -0.229091), (-0.409091, 0.772727, 0.0)]
]

kubek11 = [    [(-0.272727, 0.0454545, 0.0), (-0.272727, 0.0454545, 0.152727), (-0.152727, 0.0454545, 0.272727), (0.0, 0.0454545, 0.272727)],
    [(-0.409091, 0.272727, 0.0), (-0.409091, 0.272727, 0.229091), (-0.229091, 0.272727, 0.409091), (0.0, 0.272727, 0.409091)],
    [(-0.409091, 0.545455, 0.0), (-0.409091, 0.545455, 0.229091), (-0.229091, 0.545455, 0.409091), (0.0, 0.545455, 0.409091)],
    [(-0.409091, 0.772727, 0.0), (-0.409091, 0.772727, 0.229091), (-0.229091, 0.772727, 0.409091), (0.0, 0.772727, 0.409091)]
]

kubek12 = [
    [(0.0, 0.0454545, 0.272727), (0.152727, 0.0454545, 0.272727), (0.272727, 0.0454545, 0.152727), (0.272727, 0.0454545, 0.0)],
    [(0.0, 0.272727, 0.409091), (0.229091, 0.272727, 0.409091), (0.409091, 0.272727, 0.229091), (0.409091, 0.272727, 0.0)],
    [(0.0, 0.545455, 0.409091), (0.229091, 0.545455, 0.409091), (0.409091, 0.545455, 0.229091), (0.409091, 0.545455, 0.0)],
    [(0.0, 0.772727, 0.409091), (0.229091, 0.772727, 0.409091), (0.409091, 0.772727, 0.229091), (0.409091, 0.772727, 0.0)]
]
kubek13 = [
    [(-0.454545, 0.704545, 0.0), (-0.454545, 0.704545, -0.0454545), (-0.454545, 0.772727, -0.0454545), (-0.454545, 0.772727, 0.0)],
[(-0.772727, 0.863636, 0.0), (-0.772727, 0.863636, -0.0454545), (-0.818182, 0.954545, -0.0454545), (-0.818182, 0.954545, 0.0)],
[(-0.772727, 0.522727, 0.0), (-0.772727, 0.522727, -0.0454545), (-0.909091, 0.477273, -0.0454545), (-0.909091, 0.477273, 0.0)],
[(-0.409091, 0.363636, 0.0), (-0.409091, 0.363636, -0.0454545), (-0.409091, 0.295455, -0.0454545), (-0.409091, 0.295455, 0.0)]
]

kubek14 =  [
[(-0.454545, 0.772727, 0.0), (-0.454545, 0.772727, 0.0454545), (-0.454545, 0.704545, 0.0454545), (-0.454545, 0.704545, 0.0)],
[(-0.818182, 0.954545, 0.0), (-0.818182, 0.954545, 0.0454545), (-0.772727, 0.863636, 0.0454545), (-0.772727, 0.863636, 0.0)],
[(-0.909091, 0.477273, 0.0), (-0.909091, 0.477273, 0.0454545), (-0.772727, 0.522727, 0.0454545), (-0.772727, 0.522727, 0.0)],
[(-0.409091, 0.295455, 0.0), (-0.409091, 0.295455, 0.0454545), (-0.409091, 0.363636, 0.0454545), (-0.409091, 0.363636, 0.0)]
]

kubek15 = [
[(0.318182, 0.0454545, 0.0), (0.318182, 0.0454545, -0.178182), (0.178182, 0.0454545, -0.318182), (0.0, 0.0454545, -0.318182)],
[(0.545455, 0.0454545, 0.0), (0.545455, 0.0454545, -0.305455), (0.305455, 0.0454545, -0.545455), (0.0, 0.0454545, -0.545455)],
[(0.727273, 0.136364, 0.0), (0.727273, 0.136364, -0.407273), (0.407273, 0.136364, -0.727273), (0.0, 0.136364, -0.727273)],
[(0.909091, 0.136364, 0.0), (0.909091, 0.136364, -0.509091), (0.509091, 0.136364, -0.909091), (0.0, 0.136364, -0.909091)]
]

kubek16 = [
[(0.0, 0.0454545, -0.318182), (-0.178182, 0.0454545, -0.318182), (-0.318182, 0.0454545, -0.178182), (-0.318182, 0.0454545, 0.0)],
[(0.0, 0.0454545, -0.545455), (-0.305455, 0.0454545, -0.545455), (-0.545455, 0.0454545, -0.305455), (-0.545455, 0.0454545, 0.0)],
[(0.0, 0.136364, -0.727273), (-0.407273, 0.136364, -0.727273), (-0.727273, 0.136364, -0.407273), (-0.727273, 0.136364, 0.0)],
[(0.0, 0.136364, -0.909091), (-0.509091, 0.136364, -0.909091), (-0.909091, 0.136364, -0.509091), (-0.909091, 0.136364, 0.0)]
]

kubek17 =  [
[(-0.318182, 0.0454545, 0.0), (-0.318182, 0.0454545, 0.178182), (-0.178182, 0.0454545, 0.318182), (0.0, 0.0454545, 0.318182)],
[(-0.545455, 0.0454545, 0.0), (-0.545455, 0.0454545, 0.305455), (-0.305455, 0.0454545, 0.545455), (0.0, 0.0454545, 0.545455)],
[(-0.727273, 0.136364, 0.0), (-0.727273, 0.136364, 0.407273), (-0.407273, 0.136364, 0.727273), (0.0, 0.136364, 0.727273)],
[(-0.909091, 0.136364, 0.0), (-0.909091, 0.136364, 0.509091), (-0.509091, 0.136364, 0.909091), (0.0, 0.136364, 0.909091)]
]

kubek18 = [
    [(0.0, 0.0454545, 0.318182), (0.178182, 0.0454545, 0.318182), (0.318182, 0.0454545, 0.178182), (0.318182, 0.0454545, 0.0)],
    [(0.0, 0.0454545, 0.545455), (0.305455, 0.0454545, 0.545455), (0.545455, 0.0454545, 0.305455), (0.545455, 0.0454545, 0.0)],
    [(0.0, 0.136364, 0.727273), (0.407273, 0.136364, 0.727273), (0.727273, 0.136364, 0.407273), (0.727273, 0.136364, 0.0)],
    [(0.0, 0.136364, 0.909091), (0.509091, 0.136364, 0.909091), (0.909091, 0.136364, 0.509091), (0.909091, 0.136364, 0.0)]
]

kubek19 = [
    [(0.909091, 0.136364, 0.0), (0.909091, 0.136364, -0.509091), (0.509091, 0.136364, -0.909091), (0.0, 0.136364, -0.909091)],
[(1.0, 0.136364, 0.0), (1.0, 0.136364, -0.56), (0.56, 0.136364, -1.0), (0.0, 0.136364, -1.0)],
[(1.0, 0.0909091, 0.0), (1.0, 0.0909091, -0.56), (0.56, 0.0909091, -1.0), (0.0, 0.0909091, -1.0)],
[(0.909091, 0.0909091, 0.0), (0.909091, 0.0909091, -0.509091), (0.509091, 0.0909091, -0.909091), (0.0, 0.0909091, -0.909091)]
]

kubek20 = [
[(0.0, 0.136364, -0.909091), (-0.509091, 0.136364, -0.909091), (-0.909091, 0.136364, -0.509091), (0.0, 0.136364, 0.0)],
[(0.0, 0.136364, -1.0), (-0.56, 0.136364, -1.0), (-1.0, 0.136364, -0.56), (0.0, 0.136364, 0.0)],
[(0.0, 0.0909091, -1.0), (-0.56, 0.0909091, -1.0), (-1.0, 0.0909091, -0.56), (0.0, 0.0909091, 0.0)],
[(0.0, 0.0909091, -0.909091), (-0.509091, 0.0909091, -0.909091), (-0.909091, 0.0909091, -0.509091), (0.0, 0.0909091, 0.0)]
]

kubek21 = [
    [(-0.909091, 0.136364, 0.0), (-0.909091, 0.136364, 0.509091), (-0.509091, 0.136364, 0.909091), (0.0, 0.136364, 0.909091)],
    [(-1.0, 0.136364, 0.0), (-1.0, 0.136364, 0.56), (-0.56, 0.136364, 1.0), (0.0, 0.136364, 1.0)],
    [(-1.0, 0.0909091, 0.0), (-1.0, 0.0909091, 0.56), (-0.56, 0.0909091, 1.0), (0.0, 0.0909091, 1.0)],
    [(-0.909091, 0.0909091, 0.0), (-0.909091, 0.0909091, 0.509091), (-0.509091, 0.0909091, 0.909091), (0.0, 0.0909091, 0.909091)]
]

kubek22 = [
[(0.0, 0.136364, 0.909091), (0.509091, 0.136364, 0.909091), (0.909091, 0.136364, 0.509091), (0.909091, 0.136364, 0.0)],
[(0.0, 0.136364, 1.0), (0.56, 0.136364, 1.0), (1.0, 0.136364, 0.56), (1.0, 0.136364, 0.0)],
[(0.0, 0.0909091, 1.0), (0.56, 0.0909091, 1.0), (1.0, 0.0909091, 0.56), (1.0, 0.0909091, 0.0)],
[(0.0, 0.0909091, 0.909091), (0.509091, 0.0909091, 0.909091), (0.909091, 0.0909091, 0.509091), (0.909091, 0.0909091, 0.0)]
]

kubek23 = [
    [(0.909091, 0.0909091, 0.0), (0.909091, 0.0909091, -0.509091), (0.509091, 0.0909091, -0.909091), (0.0, 0.0909091, -0.909091)],
[(0.727273, 0.0909091, 0.0), (0.727273, 0.0909091, -0.407273), (0.407273, 0.0909091, -0.727273), (0.0, 0.0909091, -0.727273)],
[(0.545455, 0.0, 0.0), (0.545455, 0.0, -0.305455), (0.305455, 0.0, -0.545455), (0.0, 0.0, -0.545455)],
[(0.318182, 0.0, 0.0), (0.318182, 0.0, -0.178182), (0.178182, 0.0, -0.318182), (0.0, 0.0, -0.318182)]
]

kubek24 = [    [(0.0, 0.0909091, -0.909091), (-0.509091, 0.0909091, -0.909091), (-0.909091, 0.0909091, -0.509091), (0.0, 0.0909091, 0.0)],
    [(0.0, 0.0909091, -0.727273), (-0.407273, 0.0909091, -0.727273), (-0.727273, 0.0909091, -0.407273), (0.0, 0.0909091, 0.0)],
    [(0.0, 0.0, -0.545455), (-0.305455, 0.0, -0.545455), (-0.545455, 0.0, -0.305455), (0.0, 0.0, 0.0)],
    [(0.0, 0.0, -0.318182), (-0.178182, 0.0, -0.318182), (-0.318182, 0.0, -0.178182), (0.0, 0.0, 0.0)]
]

kubek25 = [
    [(-0.909091, 0.0909091, 0.0), (-0.909091, 0.0909091, 0.509091), (-0.509091, 0.0909091, 0.909091), (0.0, 0.0909091, 0.909091)],
    [(-0.727273, 0.0909091, 0.0), (-0.727273, 0.0909091, 0.407273), (-0.407273, 0.0909091, 0.727273), (0.0, 0.0909091, 0.727273)],
    [(-0.545455, 0.0, 0.0), (-0.545455, 0.0, 0.305455), (-0.305455, 0.0, 0.545455), (0.0, 0.0, 0.545455)],
    [(-0.318182, 0.0, 0.0), (-0.318182, 0.0, 0.178182), (-0.178182, 0.0, 0.318182), (0.0, 0.0, 0.318182)]
]

kubek26 = [
[(0.0, 0.0909091, 0.909091), (0.509091, 0.0909091, 0.909091), (0.909091, 0.0909091, 0.509091), (0.909091, 0.0909091, 0.0)],
[(0.0, 0.0909091, 0.727273), (0.407273, 0.0909091, 0.727273), (0.727273, 0.0909091, 0.407273), (0.727273, 0.0909091, 0.0)],
[(0.0, 0.0, 0.545455), (0.305455, 0.0, 0.545455), (0.545455, 0.0, 0.305455), (0.545455, 0.0, 0.0)],
[(0.0, 0.0, 0.318182), (0.178182, 0.0, 0.318182), (0.318182, 0.0, 0.178182), (0.318182, 0.0, 0.0)]
]

# Rysowanie filiżanki
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

plot_bezier_surface(kubek1)
plot_bezier_surface(kubek2)
plot_bezier_surface(kubek3)
plot_bezier_surface(kubek4)
plot_bezier_surface(kubek5)
plot_bezier_surface(kubek6)
plot_bezier_surface(kubek7)
plot_bezier_surface(kubek8)
plot_bezier_surface(kubek9)
plot_bezier_surface(kubek10)
plot_bezier_surface(kubek11)
plot_bezier_surface(kubek12)
plot_bezier_surface(kubek13)
plot_bezier_surface(kubek14)
plot_bezier_surface(kubek15)
plot_bezier_surface(kubek16)
plot_bezier_surface(kubek17)
plot_bezier_surface(kubek18)
plot_bezier_surface(kubek19)
plot_bezier_surface(kubek20)
plot_bezier_surface(kubek21)
plot_bezier_surface(kubek22)
plot_bezier_surface(kubek23)
plot_bezier_surface(kubek24)
plot_bezier_surface(kubek25)
plot_bezier_surface(kubek26)

plt.show()


#Współrzędne punktów kontrolnych łyżki
lyzka1 = [    [(-1.07143E-4, 0.205357, 0.0), (0.0, 0.196429, -0.0178571), (0.0, 0.196429, -0.0178571), (1.07143E-4, 0.205357, 0.0)],
    [(-0.0535714, 0.205357, 0.0), (-0.0222714, 0.178571, -0.0534286), (0.0222714, 0.178571, -0.0534286), (0.0535714, 0.205357, 0.0)],
    [(-0.107143, 0.0952429, -0.0178571), (-0.0446429, 0.0952429, -0.0892857), (0.0446429, 0.0952429, -0.0892857), (0.107143, 0.0952429, -0.0178571)],
    [(-0.107143, 0.0, -0.0178571), (-0.0446429, 0.0, -0.0892857), (0.0446429, 0.0, -0.0892857), (0.107143, 0.0, -0.0178571)]
]
lyzka2 = [
[(1.07143E-4, 0.205357, 0.0), (1.35714E-4, 0.207589, 0.00446429), (1.57143E-4, 0.216518, 0.00446429), (1.25E-4, 0.214286, 0.0)],
[(0.0535714, 0.205357, 0.0), (0.0613964, 0.212054, 0.0133571), (0.0714286, 0.220982, 0.015625), (0.0625, 0.214286, 0.0)],
[(0.107143, 0.0952429, -0.0178571), (0.122768, 0.0952429, 0.0), (0.142857, 0.0952429, 0.00446429), (0.125, 0.0952429, -0.0178571)],
[(0.107143, 0.0, -0.0178571), (0.122768, 0.0, 0.0), (0.142857, 0.0, 0.00446429), (0.125, 0.0, -0.0178571)]
]

lyzka3 =  [
[(1.25E-4, 0.214286, 0.0), (0.0, 0.205357, -0.0178571), (0.0, 0.205357, -0.0178571), (-1.25E-4, 0.214286, 0.0)],
[(0.0625, 0.214286, 0.0), (0.0267857, 0.1875, -0.0625), (-0.0267857, 0.1875, -0.0625), (-0.0625, 0.214286, 0.0)],
[(0.125, 0.0952429, -0.0178571), (0.0535714, 0.0952429, -0.107143), (-0.0535714, 0.0952429, -0.107143), (-0.125, 0.0952429, -0.0178571)],
[(0.125, 0.0, -0.0178571), (0.0535714, 0.0, -0.107143), (-0.0535714, 0.0, -0.107143), (-0.125, 0.0, -0.0178571)]
]

lyzka4 = [
[( -1.25E-4, 0.214286, 0.0), (-1.57143E-4, 0.216518, 0.00446429), (-1.35714E-4, 0.207589, 0.00446429), (-1.07143E-4, 0.205357, 0.0)],
[(-0.0625, 0.214286, 0.0), (-0.0714286, 0.220982, 0.015625), (-0.0613964, 0.212054, 0.0133571), (-0.0535714, 0.205357, 0.0)],
[(-0.125, 0.0952429, -0.0178571), (-0.142857, 0.0952429, 0.00446429), (-0.122768, 0.0952429, 0.0), (-0.107143, 0.0952429, -0.0178571)],
[(-0.125, 0.0, -0.0178571), (-0.142857, 0.0, 0.00446429), (-0.122768, 0.0, 0.0), (-0.107143, 0.0, -0.0178571)]
]
lyzka5 = [
[(-0.107143, 0.0, -0.0178571), (-0.0446429, 0.0, -0.0892857), (0.0446429, 0.0, -0.0892857), (0.107143, 0.0, -0.0178571)],
[(-0.107143, -0.142857, -0.0178571), (-0.0446429, -0.142857, -0.0892857), (0.0446429, -0.142857, -0.0892857), (0.107143, -0.142857, -0.0178571)],
[(-0.0133929, -0.160714, 0.0386893), (-0.00557857, -0.160714, 0.0386893), (0.00557857, -0.160714, 0.0386893), (0.0133929, -0.160714, 0.0386893)],
[(-0.0133929, -0.25, 0.0535714), (-0.00557857, -0.25, 0.0535714), (0.00557857, -0.25, 0.0535714), (0.0133929, -0.25, 0.0535714)]
]

lyzka6 = [
[(0.107143, 0.0, -0.0178571), (0.122768, 0.0, 0.0), (0.142857, 0.0, 0.00446429), (0.125, 0.0, -0.0178571)],
[(0.107143, -0.142857, -0.0178571), (0.122768, -0.142857, 0.0), (0.142857, -0.142857, 0.00446429), (0.125, -0.142857, -0.0178571)],
[(0.0133929, -0.160714, 0.0386893), (0.0153464, -0.160714, 0.0386893), (0.0178571, -0.160714, 0.0314357), (0.015625, -0.160714, 0.0297607)],
[(0.0133929, -0.25, 0.0535714), (0.0153464, -0.25, 0.0535714), (0.0178571, -0.25, 0.0463179), (0.015625, -0.25, 0.0446429)]
]

lyzka7 = [
[(0.125, 0.0, -0.0178571), (0.125, -0.142857, -0.0178571), (-0.125, -0.142857, -0.0178571), (-0.125, 0.0, -0.0178571)],
[(0.0535714, 0.0, -0.107143), (0.0535714, -0.142857, -0.107143), (-0.0535714, -0.142857, -0.107143), (-0.0535714, 0.0, -0.107143)],
[(0.00669643, -0.160714, 0.0230643), (0.015625, -0.160714, 0.0297607), (-0.015625, -0.160714, 0.0297607), (-0.00781071, -0.160714, 0.0208321)],
[(0.00669643, -0.25, 0.0379464), (0.015625, -0.25, 0.0446429), (-0.015625, -0.25, 0.0446429), (-0.00781071, -0.25, 0.0357143)]
]

lyzka8 = [
[(-0.125, 0.0, -0.0178571), (-0.142857, 0.0, 0.00446429), (-0.122768, 0.0, 0.0), (-0.107143, 0.0, -0.0178571)],
[(-0.125, -0.142857, -0.0178571), (-0.142857, -0.142857, 0.00446429), (-0.122768, -0.142857, 0.0), (-0.107143, -0.142857, -0.0178571)],
[(-0.015625, -0.160714, 0.0297607), (-0.0175786, -0.160714, 0.0319929), (-0.0153464, -0.160714, 0.0386893), (-0.0133929, -0.160714, 0.0386893)],
[(-0.015625, -0.25, 0.0446429), (-0.0175786, -0.25, 0.046875), (-0.0153464, -0.25, 0.0535714), (-0.0133929, -0.25, 0.0535714)]
]
lyzka9 = [
[(-0.0133929, -0.25, 0.0535714), (-0.00557857, -0.25, 0.0535714), (0.00557857, -0.25, 0.0535714), (0.0133929, -0.25, 0.0535714)],
[(-0.0133929, -0.46425, 0.0892857), (-0.00557857, -0.46425, 0.0892857), (0.00557857, -0.46425, 0.0892857), (0.0133929, -0.46425, 0.0892857)],
[(-0.0446429, -0.678571, 0.0535714), (-0.00892857, -0.678571, 0.0625), (0.00892857, -0.678571, 0.0625), (0.0446429, -0.678571, 0.0535714)],
[(-0.0446429, -0.857143, 0.0357143), (-0.00892857, -0.857143, 0.0446429), (0.00892857, -0.857143, 0.0446429), (0.0446429, -0.857143, 0.0357143)]
]

lyzka10 = [
    [(0.0133929, -0.25, 0.0535714), (0.0153464, -0.25, 0.0535714), (0.0178571, -0.25, 0.0463179), (0.015625, -0.25, 0.0446429)],
[(0.0133929, -0.46425, 0.0892857), (0.0153464, -0.464286, 0.0892857), (0.0178571, -0.46425, 0.0820321), (0.015625, -0.46425, 0.0803571)],
[(0.0446429, -0.678571, 0.0535714), (0.0535714, -0.678571, 0.0513393), (0.0535714, -0.678571, 0.0334821), (0.0446429, -0.678571, 0.0357143)],
[(0.0446429, -0.857143, 0.0357143), (0.0535714, -0.857143, 0.0334821), (0.0535714, -0.857143, 0.015625), (0.0446429, -0.857143, 0.0178571)]
]

lyzka11 =  [
[(0.015625, -0.25, 0.0446429), (0.00669643, -0.25, 0.0379464), (-0.00781071, -0.25, 0.0357143), (-0.015625, -0.25, 0.0446429)],
[(0.015625, -0.46425, 0.0803571), (0.00669643, -0.464286, 0.0736607), (-0.00781071, -0.46425, 0.0714286), (-0.015625, -0.46425, 0.0803571)],
[(0.0446429, -0.678571, 0.0357143), (0.00892857, -0.678571, 0.0446429), (-0.00892857, -0.678571, 0.0446429), (-0.0446429, -0.678571, 0.0357143)],
[(0.0446429, -0.857143, 0.0178571), (0.00892857, -0.857143, 0.0267857), (-0.00892857, -0.857143, 0.0267857), (-0.0446429, -0.857143, 0.0178571)]
]

lyzka12 =  [
[(-0.015625, -0.25, 0.0446429), (-0.0175786, -0.25, 0.046875), (-0.0153464, -0.25, 0.0535714)],
[(-0.0133929, -0.25, 0.0535714), (-0.015625, -0.46425, 0.0803571), (-0.0175786, -0.464286, 0.0825893), (-0.0153464, -0.464286, 0.0892857)],
[(-0.0133929, -0.46425, 0.0892857), (-0.0446429, -0.678571, 0.0357143), (-0.0535714, -0.678571, 0.0334821), (-0.0535714, -0.678571, 0.0513393)],
[(-0.0446429, -0.678571, 0.0535714), (-0.0446429, -0.857143, 0.0178571), (-0.0535714, -0.857143, 0.015625), (-0.0535714, -0.857143, 0.0334821)]
]

lyzka13 = [    [(-0.0446429, -0.857143, 0.0357143), (-0.00892857, -0.857143, 0.0446429), (0.00892857, -0.857143, 0.0446429), (0.0446429, -0.857143, 0.0357143)],
    [(-0.0446429, -0.928571, 0.0285714), (-0.00892857, -0.928571, 0.0375), (0.00892857, -0.928571, 0.0375), (0.0446429, -0.928571, 0.0285714)],
    [(-0.0539286, -0.999643, 0.0178571), (3.57143E-4, -0.999643, 0.0178571), (0.0, -0.999643, 0.0178571), (0.0535714, -0.999643, 0.0178571)],
    [(-3.57143E-4, -1.0, 0.0178571), (3.57143E-4, -1.0, 0.0178571), (0.0, -1.0, 0.0178571), (0.0, -1.0, 0.0178571)]
]

lyzka14 = [    [(0.0446429, -0.857143, 0.0357143), (0.0535714, -0.857143, 0.0334821), (0.0535714, -0.857143, 0.015625), (0.0446429, -0.857143, 0.0178571)],
    [(0.0446429, -0.928571, 0.0285714), (0.0535714, -0.928571, 0.0263393), (0.0535714, -0.928571, 0.00848214), (0.0446429, -0.928571, 0.0107143)],
    [(0.0535714, -0.999643, 0.0178571), (0.0669643, -0.999643, 0.0178571), (0.0673214, -0.999643, 0.0), (0.0539286, -0.999643, 0.0)],
    [(0.0, -1.0, 0.0178571), (0.0, -1.0, 0.0178571), (3.57143E-4, -1.0, 0.0), (3.57143E-4, -1.0, 0.0)]
]

lyzka15 =  [
[(0.0446429, -0.857143, 0.0178571), (0.00892857, -0.857143, 0.0267857), (-0.00892857, -0.857143, 0.0267857), (-0.0446429, -0.857143, 0.0178571)],
[(0.0446429, -0.928571, 0.0107143), (0.00892857, -0.928571, 0.0196429), (-0.00892857, -0.928571, 0.0196429), (-0.0446429, -0.928571, 0.0107143)],
[(0.0539286, -0.999643, 0.0), (3.57143E-4, -0.999643, 0.0), (-3.57143E-4, -0.999643, 0.0), (-0.0539286, -0.999643, 0.0)],
[(3.57143E-4, -1.0, 0.0), (3.57143E-4, -1.0, 0.0), (-3.57143E-4, -1.0, 0.0), (-3.57143E-4, -1.0, 0.0)]
]

lyzka16 = [
    [(-0.0446429, -0.857143, 0.0178571), (-0.0535714, -0.857143, 0.015625), (-0.0535714, -0.857143, 0.0334821), (-0.0446429, -0.857143, 0.0357143)],
[(-0.0446429, -0.928571, 0.0107143), (-0.0535714, -0.928571, 0.00848214), (-0.0535714, -0.928571, 0.0263393), (-0.0446429, -0.928571, 0.0285714)],
[(-0.0539286, -0.999643, 0.0), (-0.0673214, -0.999643, 0.0), (-0.0675, -0.999643, 0.0178571), (-0.0539286, -0.999643, 0.0178571)],
[(-3.57143E-4, -1.0, 0.0), (-3.57143E-4, -1.0, 0.0), (-5.35714E-4, -1.0, 0.0178571), (-3.57143E-4, -1.0, 0.0178571)]
]

#Rysowanie lyżki
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

plot_bezier_surface(lyzka1)
plot_bezier_surface(lyzka2)
plot_bezier_surface(lyzka3)
plot_bezier_surface(lyzka4)
plot_bezier_surface(lyzka5)
plot_bezier_surface(lyzka6)
plot_bezier_surface(lyzka7)
plot_bezier_surface(lyzka8)
plot_bezier_surface(lyzka9)
plot_bezier_surface(lyzka10)
plot_bezier_surface(lyzka11)
plot_bezier_surface(lyzka12)
plot_bezier_surface(lyzka13)
plot_bezier_surface(lyzka14)
plot_bezier_surface(lyzka15)
plot_bezier_surface(lyzka16)

plt.show()

#Współrzędne punktów kontrolnych dzbanka
points1 = [
    [(1.4, 0.0, 2.4), (1.4, -0.784, 2.4), (0.784, -1.4, 2.4), (0.0, -1.4, 2.4)],
    [(1.3375, 0.0, 2.53125), (1.3375, -0.749, 2.53125), (0.749, -1.3375, 2.53125), (0.0, -1.3375, 2.53125)],
    [(1.4375, 0.0, 2.53125), (1.4375, -0.805, 2.53125), (0.805, -1.4375, 2.53125), (0.0, -1.4375, 2.53125)],
    [(1.5, 0.0, 2.4), (1.5, -0.84, 2.4), (0.84, -1.5, 2.4), (0.0, -1.5, 2.4)]
]
points2 = [    [(0.0, -1.4, 2.4), (-0.784, -1.4, 2.4), (-1.4, -0.784, 2.4), (-1.4, 0.0, 2.4)],
    [(0.0, -1.3375, 2.53125), (-0.749, -1.3375, 2.53125), (-1.3375, -0.749, 2.53125), (-1.3375, 0.0, 2.53125)],
    [(0.0, -1.4375, 2.53125), (-0.805, -1.4375, 2.53125), (-1.4375, -0.805, 2.53125), (-1.4375, 0.0, 2.53125)],
    [(0.0, -1.5, 2.4), (-0.84, -1.5, 2.4), (-1.5, -0.84, 2.4), (-1.5, 0.0, 2.4)]
]

points3 = [    [(-1.4, 0.0, 2.4), (-1.4, 0.784, 2.4), (-0.784, 1.4, 2.4), (0.0, 1.4, 2.4)],
    [(-1.3375, 0.0, 2.53125), (-1.3375, 0.749, 2.53125), (-0.749, 1.3375, 2.53125), (0.0, 1.3375, 2.53125)],
    [(-1.4375, 0.0, 2.53125), (-1.4375, 0.805, 2.53125), (-0.805, 1.4375, 2.53125), (0.0, 1.4375, 2.53125)],
    [(-1.5, 0.0, 2.4), (-1.5, 0.84, 2.4), (-0.84, 1.5, 2.4), (0.0, 1.5, 2.4)]
]

points4 = [    [(0.0, 1.4, 2.4), (0.784, 1.4, 2.4), (1.4, 0.784, 2.4), (1.4, 0.0, 2.4)],
    [(0.0, 1.3375, 2.53125), (0.749, 1.3375, 2.53125), (1.3375, 0.749, 2.53125), (1.3375, 0.0, 2.53125)],
    [(0.0, 1.4375, 2.53125), (0.805, 1.4375, 2.53125), (1.4375, 0.805, 2.53125), (1.4375, 0.0, 2.53125)],
    [(0.0, 1.5, 2.4), (0.84, 1.5, 2.4), (1.5, 0.84, 2.4), (1.5, 0.0, 2.4)]
]

points5 = [
    [(1.5, 0.0, 2.4), (1.5, -0.84, 2.4), (0.84, -1.5, 2.4), (0.0, -1.5, 2.4)],
    [(1.75, 0.0, 1.875), (1.75, -0.98, 1.875), (0.98, -1.75, 1.875), (0.0, -1.75, 1.875)],
    [(2.0, 0.0, 1.35), (2.0, -1.12, 1.35), (1.12, -2.0, 1.35), (0.0, -2.0, 1.35)],
    [(2.0, 0.0, 0.9), (2.0, -1.12, 0.9), (1.12, -2.0, 0.9), (0.0, -2.0, 0.9)]
]

points6 = [
[(0.0, -1.5, 2.4), (-0.84, -1.5, 2.4), (-1.5, -0.84, 2.4), (-1.5, 0.0, 2.4)],
[(0.0, -1.75, 1.875), (-0.98, -1.75, 1.875), (-1.75, -0.98, 1.875), (-1.75, 0.0, 1.875)],
[(0.0, -2.0, 1.35), (-1.12, -2.0, 1.35), (-2.0, -1.12, 1.35), (-2.0, 0.0, 1.35)],
[(0.0, -2.0, 0.9), (-1.12, -2.0, 0.9), (-2.0, -1.12, 0.9), (-2.0, 0.0, 0.9)]
]

points7 = [
    [(-1.5, 0.0, 2.4), (-1.5, 0.84, 2.4), (-0.84, 1.5, 2.4), (0.0, 1.5, 2.4)],
    [(-1.75, 0.0, 1.875), (-1.75, 0.98, 1.875), (-0.98, 1.75, 1.875), (0.0, 1.75, 1.875)],
    [(-2.0, 0.0, 1.35), (-2.0, 1.12, 1.35), (-1.12, 2.0, 1.35), (0.0, 2.0, 1.35)],
    [(-2.0, 0.0, 0.9), (-2.0, 1.12, 0.9), (-1.12, 2.0, 0.9), (0.0, 2.0, 0.9)]
]

points8 = [
    [(0.0, 1.5, 2.4), (0.84, 1.5, 2.4), (1.5, 0.84, 2.4), (1.5, 0.0, 2.4)],
    [(0.0, 1.75, 1.875), (0.98, 1.75, 1.875), (1.75, 0.98, 1.875), (1.75, 0.0, 1.875)],
    [(0.0, 2.0, 1.35), (1.12, 2.0, 1.35), (2.0, 1.12, 1.35), (2.0, 0.0, 1.35)],
    [(0.0, 2.0, 0.9), (1.12, 2.0, 0.9), (2.0, 1.12, 0.9), (2.0, 0.0, 0.9)]
]

points9 = [
    [(2.0, 0.0, 0.9), (2.0, -1.12, 0.9), (1.12, -2.0, 0.9), (0.0, -2.0, 0.9)],
    [(2.0, 0.0, 0.45), (2.0, -1.12, 0.45), (1.12, -2.0, 0.45), (0.0, -2.0, 0.45)],
    [(1.5, 0.0, 0.225), (1.5, -0.84, 0.225), (0.84, -1.5, 0.225), (0.0, -1.5, 0.225)],
    [(1.5, 0.0, 0.15), (1.5, -0.84, 0.15), (0.84, -1.5, 0.15), (0.0, -1.5, 0.15)]
]

points10 = [    [(0.0, -2.0, 0.9), (-1.12, -2.0, 0.9), (-2.0, -1.12, 0.9), (-2.0, 0.0, 0.9)],
    [(0.0, -2.0, 0.45), (-1.12, -2.0, 0.45), (-2.0, -1.12, 0.45), (-2.0, 0.0, 0.45)],
    [(0.0, -1.5, 0.225), (-0.84, -1.5, 0.225), (-1.5, -0.84, 0.225), (-1.5, 0.0, 0.225)],
    [(0.0, -1.5, 0.15), (-0.84, -1.5, 0.15), (-1.5, -0.84, 0.15), (-1.5, 0.0, 0.15)]
]

points11 = [
    [(-2.0, 0.0, 0.9), (-2.0, 1.12, 0.9), (-1.12, 2.0, 0.9), (0.0, 2.0, 0.9)],
    [(-2.0, 0.0, 0.45), (-2.0, 1.12, 0.45), (-1.12, 2.0, 0.45), (0.0, 2.0, 0.45)],
    [(-1.5, 0.0, 0.225), (-1.5, 0.84, 0.225), (-0.84, 1.5, 0.225), (0.0, 1.5, 0.225)],
    [(-1.5, 0.0, 0.15), (-1.5, 0.84, 0.15), (-0.84, 1.5, 0.15), (0.0, 1.5, 0.15)]
]

points12 = [    [(0.0, 2.0, 0.9), (1.12, 2.0, 0.9), (2.0, 1.12, 0.9), (2.0, 0.0, 0.9)],
    [(0.0, 2.0, 0.45), (1.12, 2.0, 0.45), (2.0, 1.12, 0.45), (2.0, 0.0, 0.45)],
    [(0.0, 1.5, 0.225), (0.84, 1.5, 0.225), (1.5, 0.84, 0.225), (1.5, 0.0, 0.225)],
    [(0.0, 1.5, 0.15), (0.84, 1.5, 0.15), (1.5, 0.84, 0.15), (1.5, 0.0, 0.15)]
]

points13 = [
[(-1.6, 0.0, 2.025), (-1.6, -0.3, 2.025), (-1.5, -0.3, 2.25), (-1.5, 0.0, 2.25)],
[(-2.3, 0.0, 2.025), (-2.3, -0.3, 2.025), (-2.5, -0.3, 2.25), (-2.5, 0.0, 2.25)],
[(-2.7, 0.0, 2.025), (-2.7, -0.3, 2.025), (-3.0, -0.3, 2.25), (-3.0, 0.0, 2.25)],
[(-2.7, 0.0, 1.8), (-2.7, -0.3, 1.8), (-3.0, -0.3, 1.8), (-3.0, 0.0, 1.8)]
]

points14 = [
[(-1.5, 0.0, 2.25), (-1.5, 0.3, 2.25), (-1.6, 0.3, 2.025), (-1.6, 0.0, 2.025)],
[(-2.5, 0.0, 2.25), (-2.5, 0.3, 2.25), (-2.3, 0.3, 2.025), (-2.3, 0.0, 2.025)],
[(-3.0, 0.0, 2.25), (-3.0, 0.3, 2.25), (-2.7, 0.3, 2.025), (-2.7, 0.0, 2.025)],
[(-3.0, 0.0, 1.8), (-3.0, 0.3, 1.8), (-2.7, 0.3, 1.8), (-2.7, 0.0, 1.8)]
]

points15 = [    [(-2.7, 0.0, 1.8), (-2.7, -0.3, 1.8), (-3.0, -0.3, 1.8), (-3.0, 0.0, 1.8)],
    [(-2.7, 0.0, 1.575), (-2.7, -0.3, 1.575), (-3.0, -0.3, 1.35), (-3.0, 0.0, 1.35)],
    [(-2.5, 0.0, 1.125), (-2.5, -0.3, 1.125), (-2.65, -0.3, 0.9375), (-2.65, 0.0, 0.9375)],
    [(-2.0, 0.0, 0.9), (-2.0, -0.3, 0.9), (-1.9, -0.3, 0.6), (-1.9, 0.0, 0.6)]
]

points16 = [
[(-3.0, 0.0, 1.8), (-3.0, 0.3, 1.8), (-2.7, 0.3, 1.8), (-2.7, 0.0, 1.8)],
[(-3.0, 0.0, 1.35), (-3.0, 0.3, 1.35), (-2.7, 0.3, 1.575), (-2.7, 0.0, 1.575)],
[(-2.65, 0.0, 0.9375), (-2.65, 0.3, 0.9375), (-2.5, 0.3, 1.125), (-2.5, 0.0, 1.125)],
[(-1.9, 0.0, 0.6), (-1.9, 0.3, 0.6), (-2.0, 0.3, 0.9), (-2.0, 0.0, 0.9)]
]

points17 = [
    [(1.7, 0.0, 1.425), (1.7, -0.66, 1.425), (1.7, -0.66, 0.6), (1.7, 0.0, 0.6)],
    [(2.6, 0.0, 1.425), (2.6, -0.66, 1.425), (3.1, -0.66, 0.825), (3.1, 0.0, 0.825)],
    [(2.3, 0.0, 2.1), (2.3, -0.25, 2.1), (2.4, -0.25, 2.025), (2.4, 0.0, 2.025)],
    [(2.7, 0.0, 2.4), (2.7, -0.25, 2.4), (3.3, -0.25, 2.4), (3.3, 0.0, 2.4)]
]

points18 = [
    [(1.7, 0.0, 0.6), (1.7, 0.66, 0.6), (1.7, 0.66, 1.425), (1.7, 0.0, 1.425)],
    [(3.1, 0.0, 0.825), (3.1, 0.66, 0.825), (2.6, 0.66, 1.425), (2.6, 0.0, 1.425)],
    [(2.4, 0.0, 2.025), (2.4, 0.25, 2.025), (2.3, 0.25, 2.1), (2.3, 0.0, 2.1)],
    [(3.3, 0.0, 2.4), (3.3, 0.25, 2.4), (2.7, 0.25, 2.4), (2.7, 0.0, 2.4)]
]

points19 = [
    [(2.7, 0.0, 2.4), (2.7, -0.25, 2.4), (3.3, -0.25, 2.4), (3.3, 0.0, 2.4)],
    [(2.8, 0.0, 2.475), (2.8, -0.25, 2.475), (3.525, -0.25, 2.49375), (3.525, 0.0, 2.49375)],
    [(2.9, 0.0, 2.475), (2.9, -0.15, 2.475), (3.45, -0.15, 2.5125), (3.45, 0.0, 2.5125)],
    [(2.8, 0.0, 2.4), (2.8, -0.15, 2.4), (3.2, -0.15, 2.4), (3.2, 0.0, 2.4)]
]

points20 = [
    [(3.3, 0.0, 2.4), (3.3, 0.25, 2.4), (2.7, 0.25, 2.4), (2.7, 0.0, 2.4)],
    [(3.525, 0.0, 2.49375), (3.525, 0.25, 2.49375), (2.8, 0.25, 2.475), (2.8, 0.0, 2.475)],
    [(3.45, 0.0, 2.5125), (3.45, 0.15, 2.5125), (2.9, 0.15, 2.475), (2.9, 0.0, 2.475)],
    [(3.2, 0.0, 2.4), (3.2, 0.15, 2.4), (2.8, 0.15, 2.4), (2.8, 0.0, 2.4)]
]

points21 = [
    [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
    [(0.0, -0.8, 3.15), (-0.45, -0.8, 3.15), (-0.8, -0.45, 3.15), (-0.8, 0.0, 3.15)],
    [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
    [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)]
]

points22 = [
    [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
    [(0.0, -0.8, 3.15), (-0.45, -0.8, 3.15), (-0.8, -0.45, 3.15), (-0.8, 0.0, 3.15)],
    [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
    [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)]
]

points23 = [
    [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
    [(-0.8, 0.0, 3.15), (-0.8, 0.45, 3.15), (-0.45, 0.8, 3.15), (0.0, 0.8, 3.15)],
    [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
    [(-0.2, 0.0, 2.7), (-0.2, 0.112, 2.7), (-0.112, 0.2, 2.7), (0.0, 0.2, 2.7)]
]

points24 = [
    [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
    [(0.0, 0.8, 3.15), (0.45, 0.8, 3.15), (0.8, 0.45, 3.15), (0.8, 0.0, 3.15)],
    [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
    [(0.0, 0.2, 2.7), (0.112, 0.2, 2.7), (0.2, 0.112, 2.7), (0.2, 0.0, 2.7)]
]

points25 = [
    [(0.2, 0.0, 2.7), (0.2, -0.112, 2.7), (0.112, -0.2, 2.7), (0.0, -0.2, 2.7)],
    [(0.4, 0.0, 2.55), (0.4, -0.224, 2.55), (0.224, -0.4, 2.55), (0.0, -0.4, 2.55)],
    [(1.3, 0.0, 2.55), (1.3, -0.728, 2.55), (0.728, -1.3, 2.55), (0.0, -1.3, 2.55)],
    [(1.3, 0.0, 2.4), (1.3, -0.728, 2.4), (0.728, -1.3, 2.4), (0.0, -1.3, 2.4)],
]

points26 =[
    [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)],
    [(0.0, -0.4, 2.55), (-0.224, -0.4, 2.55), (-0.4, -0.224, 2.55), (-0.4, 0.0, 2.55)],
    [(0.0, -1.3, 2.55), (-0.728, -1.3, 2.55), (-1.3, -0.728, 2.55), (-1.3, 0.0, 2.55)],
    [(0.0, -1.3, 2.4), (-0.728, -1.3, 2.4), (-1.3, -0.728, 2.4), (-1.3, 0.0, 2.4)],
]

points27 = [
    [(-0.2, 0.0, 2.7), (-0.2, 0.112, 2.7), (-0.112, 0.2, 2.7), (0.0, 0.2, 2.7)],
    [(-0.4, 0.0, 2.55), (-0.4, 0.224, 2.55), (-0.224, 0.4, 2.55), (0.0, 0.4, 2.55)],
    [(-1.3, 0.0, 2.55), (-1.3, 0.728, 2.55), (-0.728, 1.3, 2.55), (0.0, 1.3, 2.55)],
    [(-1.3, 0.0, 2.4), (-1.3, 0.728, 2.4), (-0.728, 1.3, 2.4), (0.0, 1.3, 2.4)]
]

points28 = [
[(0.0, 0.2, 2.7), (0.112, 0.2, 2.7), (0.2, 0.112, 2.7), (0.0, 0.0, 2.7)],
[(0.0, 0.4, 2.55), (0.224, 0.4, 2.55), (0.4, 0.224, 2.55), (0.0, 0.0, 2.55)],
[(0.0, 1.3, 2.55), (0.728, 1.3, 2.55), (1.3, 0.728, 2.55), (1.3, 0.0, 2.55)],
[(0.0, 1.3, 2.4), (0.728, 1.3, 2.4), (1.3, 0.728, 2.4), (1.3, 0.0, 2.4)]
]

points29 = [
    [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
    [(1.425, 0.0, 0.0), (1.425, 0.798, 0.0), (0.798, 1.425, 0.0), (0.0, 1.425, 0.0)],
    [(1.5, 0.0, 0.075), (1.5, 0.84, 0.075), (0.84, 1.5, 0.075), (0.0, 1.5, 0.075)],
    [(1.5, 0.0, 0.15), (1.5, 0.84, 0.15), (0.84, 1.5, 0.15), (0.0, 1.5, 0.15)]
]


points30 = [
    [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
    [(0.0, 1.425, 0.0), (-0.798, 1.425, 0.0), (-1.425, 0.798, 0.0), (-1.425, 0.0, 0.0)],
    [(0.0, 1.5, 0.075), (-0.84, 1.5, 0.075), (-1.5, 0.84, 0.075), (-1.5, 0.0, 0.075)],
    [(0.0, 1.5, 0.15), (-0.84, 1.5, 0.15), (-1.5, 0.84, 0.15), (-1.5, 0.0, 0.15)]
]

points31 = [
[(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
[(-1.425, 0.0, 0.0), (-1.425, -0.798, 0.0), (-0.798, -1.425, 0.0), (0.0, -1.425, 0.0)],
[(-1.5, 0.0, 0.075), (-1.5, -0.84, 0.075), (-0.84, -1.5, 0.075), (0.0, -1.5, 0.075)],
[(-1.5, 0.0, 0.15), (-1.5, -0.84, 0.15), (-0.84, -1.5, 0.15), (0.0, -1.5, 0.15)]
]

points32 = [
    [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
    [(0.0, -1.425, 0.0), (0.798, -1.425, 0.0), (1.425, -0.798, 0.0), (1.425, 0.0, 0.0)],
    [(0.0, -1.5, 0.075), (0.84, -1.5, 0.075), (1.5, -0.84, 0.075), (1.5, 0.0, 0.075)],
    [(0.0, -1.5, 0.15), (0.84, -1.5, 0.15), (1.5, -0.84, 0.15), (1.5, 0.0, 0.15)]
]

#Rysowanie dzbanka
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

plot_bezier_surface(points1)
plot_bezier_surface(points2)
plot_bezier_surface(points3)
plot_bezier_surface(points4)
plot_bezier_surface(points5)
plot_bezier_surface(points6)
plot_bezier_surface(points7)
plot_bezier_surface(points8)
plot_bezier_surface(points9)
plot_bezier_surface(points10)
plot_bezier_surface(points11)
plot_bezier_surface(points12)
plot_bezier_surface(points13)
plot_bezier_surface(points14)
plot_bezier_surface(points15)
plot_bezier_surface(points17)
plot_bezier_surface(points18)
plot_bezier_surface(points19)
plot_bezier_surface(points20)
plot_bezier_surface(points21)
plot_bezier_surface(points22)
plot_bezier_surface(points23)
plot_bezier_surface(points24)
plot_bezier_surface(points25)
plot_bezier_surface(points26)
plot_bezier_surface(points27)
plot_bezier_surface(points28)
plot_bezier_surface(points29)
plot_bezier_surface(points30)
plot_bezier_surface(points31)
plot_bezier_surface(points32)

plt.show()

# sudoku
pygame.font.init()
# tworzenie okna o wymiarach 500x500
Window = pygame.display.set_mode((500, 500))
# ustawienie tytułu okna
pygame.display.set_caption("SUDOKU GAME")
# zdefiniowanie zmiennych przechowujące aktualne indeksy kolumny i wiersza na planszy
x = 0
z = 0
# zdefiniowanie zmiennej określającej rozmiar komórki planszy na podstawie wymiarów okna
diff = 500 / 9
# zdefiniowanie zmiennej przwchowującej wartość wpisywaną przez użytkownika na planszy
value = 0
# zdefiniowanie planszy sudoku
defaultgrid = [
    [0, 0, 4, 0, 6, 0, 0, 0, 5],
    [7, 8, 0, 4, 0, 0, 0, 2, 0],
    [0, 0, 2, 6, 0, 1, 0, 7, 8],
    [6, 1, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 7, 5, 4, 0, 0, 6, 1],
    [0, 0, 1, 7, 5, 0, 9, 3, 0],
    [0, 7, 0, 3, 0, 0, 0, 1, 0],
    [0, 4, 0, 2, 0, 6, 0, 0, 7],
    [0, 2, 0, 0, 0, 7, 4, 0, 0],
]

# ustawienie czcionek
font = pygame.font.SysFont("comicsans", 40)
font1 = pygame.font.SysFont("comicsans", 20)

# funkcja, która na podstawie pozycji kursora na planszy będzie aktualizować zmienne x i z o indeksy kolumny i wiersza,
# na których znajduje się kursor
def cord(pos):
    global x
    x = pos[0] // diff
    global z
    z = pos[1] // diff

# funkcja, która będzie rysować na planszy podświetlenie komórki, na której znajduje się kursor
def highlightbox():
    for k in range(2):
        # rysowanie poziomych linii
        pygame.draw.line(Window, (0, 0, 0), (x * diff - 3, (z + k) * diff), (x * diff + diff + 3, (z + k) * diff), 7)
        # rysowanie pionowych linii
        pygame.draw.line(Window, (0, 0, 0), ((x + k) * diff, z * diff), ((x + k) * diff, z * diff + diff), 7)

# funkcja, która rysować planszę sudoku na ekranie wraz z liniami dzielącymi plansze na sekcje 3x3
def drawlines():
    # rysowanie podświetlenia komórki, która na początku gry jest już wypełniona
    for i in range(9):
        for j in range(9):
            if defaultgrid[i][j] != 0:
                # rysuje prostokąt wokół komórki
                pygame.draw.rect(Window, (255, 255, 0), (i * diff, j * diff, diff + 1, diff + 1))
                # text1 przechowuje wartość, która znajduje się w danej komórce
                # str(defaultgrid[i][j]) zwraca wartość, która znajduje się w komórce planszy w postaci łańcucha znaków
                text1 = font.render(str(defaultgrid[i][j]), 1, (0, 0, 0))
                # rysowanie wypisanego tekstu na środku komórki planszy
                Window.blit(text1, (i * diff + 15, j * diff + 15))

    # rysowanie linii poziomych i pionowych dzielących plansze na sekcje 3x3
    for l in range(10):
        if l % 3 == 0:
            thick = 7
        else:
            thick = 1
        # linie poziome
        pygame.draw.line(Window, (0, 0, 0), (0, l * diff), (500, l * diff), thick)
        # linie pionowe
        pygame.draw.line(Window, (0, 0, 0), (l * diff, 0), (l * diff, 500), thick)


# Wypisanie wartości komórki na planszy graficznej na podstawie podanego parametru 'value'
def fillvalue(value):
    # zamiana na napis wartości value i zmienienie koloru tekstu na czarny
    text1 = font.render(str(value), 1, (0, 0, 0))
    # wypisanie text1 w miejscu zależnego od położenia kursora na planszy
    Window.blit(text1, (x * diff + 15, z * diff + 15))


# Wypisanie komunikatu "wrong!" na planszy graficznej w przypadku błędnego ruchu gracza
def raiseerror():
    text1 = font.render("wrong!", 1, (0, 0, 0))
    # rysowanie powierzchni text1 na planszy graficznej, na pozycji (20,570)
    Window.blit(text1, (20, 570))


# Wypisanie komunikatu "wrong ! enter a valid key for the game" na planszy graficznej
# w przypadku wprowadzenia nieprawidłowego klawisza przez gracza
def raiseerror1():
    text1 = font.render("wrong ! enter a valid key for the game", 1, (0, 0, 0))
    # rysowanie powierzchni text1 na planszy graficznej, na pozycji (20,570)
    Window.blit(text1, (20, 570))


# Sprawdzenie, czy podana wartość 'value' jest prawidłowa w danym miejscu na planszy sudoku
    # m - Lista reprezentująca planszę sudoku, gdzie m[i][j] oznacza wartość w komórce o indeksach (i, j)
    # k - Indeks wiersza, gdzie znajduje się komórka, którą chcemy sprawdzić
    # l - Indeks kolumny, gdzie znajduje się komórka, którą chcemy sprawdzić
    # value - Wartość, którą chcemy umieścić w komórce i sprawdzić, czy jest prawidłowa
def validvalue(m, k, l, value):
    for it in range(9):
        if m[k][it] == value: # Sprawdzenie, czy wartość 'value' nie powtarza się w tym samym wierszu
            return False # Wartość value nie może zostać umieszczona w tej komórce
        if m[it][l] == value: # Sprawdzenie, czy wartość 'value' nie powtarza się w tej samej kolumnie
            return False # Wartość value nie może zostać umieszczona w tej komórce

    # Sprawdzenie, czy wartość 'value' nie powtarza się w tym samym bloku 3x3
    it = k // 3 # Indeks wiersza bloku 3x3
    jt = l // 3 # Indeks kolumny bloku 3x3
    # it * 3 - indeks wiersza początkowej komórki bloku 3x3, it*3+3 - indeks wiersza końcowej komórki bloku 3x3
    for k in range(it * 3, it * 3 + 3):
        # jt * 3 - indeks kolumny początkowej komórki bloku 3x3, jt*3+3 - indeks kolumny końcowej komórki bloku 3x3
        for l in range(jt * 3, jt * 3 + 3):
            if m[k][l] == value:
                return False # Wartość value nie może zostać umieszczona w tej komórce
    return True # Wartość value może zostać umieszczona w tej komórce


# Rozwiązuje grę w sudoku na podstawie podanej planszy 'defaultgrid' przy użyciu algorytmu rekurencyjnego.
def solvegame(defaultgrid, i, j):
    # Sprawdzanie wartości komórki w siatce
    # Jeśli nie jest równa 0, to oznacza, że już jest wypełniona wartością i poszukujemy kolejnej wolnej komórki
    while defaultgrid[i][j] != 0:
        if i < 8:
            i += 1
        elif i == 8 and j < 8:
            i = 0
            j += 1
        elif i == 8 and j == 8:
            return True

    # Aktualizacja ekranu gry
    pygame.event.pump()
    # Próba wprowadzenia wartości od 1 do 9 do komórki
    for it in range(1, 10):
        # Sprawdzanie czy wartość jest prawidłowa dla danej komórki
        if validvalue(defaultgrid, i, j, it) == True:
            defaultgrid[i][j] = it
            global x, z
            x = i
            z = j

            # Aktualizacja ekranu gry po wprowadzeniu wartości
            Window.fill((255, 255, 255))
            drawlines()
            highlightbox()
            pygame.display.update()
            pygame.time.delay(20)

            # rozwiazanie planszy, ktora ma juz wprowadzona wartosc value do komorki
            if solvegame(defaultgrid, i, j) == 1:
                return True
            else:
                # usuwamy wprowadzona wartosc, ustawiajac ja na wartosc 0
                defaultgrid[i][j] = 0

            # Aktualizacja ekranu gry po usunięciu wartości
            Window.fill((0, 0, 0))
            drawlines()
            highlightbox()
            pygame.display.update()
            pygame.time.delay(50)

    # Jeśli nie ma możliwości wprowadzenia prawidłowej wartości, to cofamy się do poprzedniej komórki
    return False

# funkcja informująca o zakończeniu gry
def gameresult():
    text1 = font.render("game finished", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))

# gra działa, dopóki flag jest ustawione na TRUE
flag = True
# używana w celu sprawdzenia czy została użyta mysz lub klawiatura
flag1 = 0
# używana w celu sprawdzenia czy został naciśnięty ENTER i sprawdzenia czy wprowadzona wartość jest poprawna
flag2 = 0

rs = 0
error = 0

# główna pętla gry
while flag:
    Window.fill((255, 182, 193))
    for event in pygame.event.get(): # Pętla obsługująca zdarzenia pygame
        if event.type == pygame.QUIT:
            flag = False
        if event.type == pygame.MOUSEBUTTONDOWN: #kliknięcie myszą
            flag1 = 1
            pos = pygame.mouse.get_pos() # Pobranie pozycji kursora myszy
            cord(pos) # Wywołanie funkcji cord z argumentem pos
        if event.type == pygame.KEYDOWN: #naciśnięcie klawisza
            if event.key == pygame.K_LEFT: # Obsługa klawisza strzałki w lewo
                x -= 1
                flag1 = 1
            if event.key == pygame.K_RIGHT: # Obsługa klawisza strzałki w prawo
                x += 1
                flag1 = 1
            if event.key == pygame.K_UP: # Obsługa klawisza strzałki w górę
                z -= 1
                flag1 = 1
            if event.key == pygame.K_DOWN: # Obsługa klawisza strzałki w dół
                z += 1
                flag1 = 1
            if event.key == pygame.K_1:  # Obsługa klawisza "1"
                value = 1
            if event.key == pygame.K_2:  # Obsługa klawisza "2"
                value = 2
            if event.key == pygame.K_3:  # Obsługa klawisza "3"
                value = 3
            if event.key == pygame.K_4:  # Obsługa klawisza "4"
                value = 4
            if event.key == pygame.K_5:  # Obsługa klawisza "5"
                value = 5
            if event.key == pygame.K_6:  # Obsługa klawisza "6"
                value = 6
            if event.key == pygame.K_7:  # Obsługa klawisza "7"
                value = 7
            if event.key == pygame.K_8:  # Obsługa klawisza "8"
                value = 8
            if event.key == pygame.K_9:  # Obsługa klawisza "9"
                value = 9
            if event.key == pygame.K_RETURN:  # Obsługa klawisza "Enter"
                flag2 = 1
            if event.key == pygame.K_r:  # Obsługa klawisza "r"
                rs = 0
                error = 0
                flag2 = 0
                defaultgrid = [ # Resetowanie planszy do stanu początkowego
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0]
                ]
            if event.key == pygame.K_d: #Obsługa klawisza "d" - resetuje grę i przywraca domyślną planszę.
                rs = 0
                error = 0
                flag2 = 0
                defaultgrid = [
                    [0, 0, 4, 0, 6, 0, 0, 0, 5],
                    [7, 8, 0, 4, 0, 0, 0, 2, 0],
                    [0, 0, 2, 6, 0, 1, 0, 7, 8],
                    [6, 1, 0, 0, 7, 5, 0, 0, 9],
                    [0, 0, 7, 5, 4, 0, 0, 6, 1],
                    [0, 0, 1, 7, 5, 0, 9, 3, 0],
                    [0, 7, 0, 3, 0, 0, 0, 1, 0],
                    [0, 4, 0, 2, 0, 6, 0, 0, 7],
                    [0, 2, 0, 0, 0, 7, 4, 0, 0],
                ]

    if flag2 == 1:  # Sprawdzenie, czy rozwiązanie gry jest poprawne
        if solvegame(defaultgrid, 0, 0) == False:  # Wywołanie funkcji solvegame() do sprawdzenia, czy rozwiązanie jest poprawne.
            error = 1  # Aktualizacja flagi "error" na 1, jeśli rozwiązanie jest niepoprawne.
        else:
            rs = 1  # Aktualizacja flagi "rs" na 1, jeśli rozwiązanie jest poprawne.
        flag2 = 0  # Resetowanie flagi "flag2" po sprawdzeniu poprawności rozwiązania.

# sprawdzenie czu uzytkownik na pewno podal jakas wartość
    if value != 0:
        fillvalue(value)  # Wypełnienie komórki planszy wartością podaną przez użytkownika.
        # Sprawdzenie, czy podana wartość jest prawidłowa dla danej komórki planszy.
        if validvalue (defaultgrid, int(x), int(z), value) == True:
            defaultgrid[int(x)][int(z)] = value  # Aktualizacja wartości komórki planszy.
            flag1 = 0 # uzytkownik moze kontynuowac gre
        else:
            defaultgrid[int(x)][int(z)] = 0
            raiseerror1()  # Obsługa błędu, gdy podana wartość nie jest prawidłowa.
        value = 0

    if error == 1:
        raiseerror()  # Wywołanie funkcji raiseerror() w przypadku wystąpienia błędu.

    if rs == 1:
        gameresult()  # Wywołanie funkcji gameresult() w przypadku poprawnego rozwiązania gry.

    drawlines()  # Rysowanie linii planszy.

    if flag1 == 1:
        highlightbox()  # Podświetlanie aktywnej komórki planszy.

    pygame.display.update()  # Aktualizacja ekranu gry po wykonaniu zmian.

pygame.quit()  # Zakończenie pracy z biblioteką Pygame za pomocą funkcji pygame.quit().
